local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = 'Atlas Ware SouthWest Florida',
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = 'Haze AnanÄ± Gotten...',
    LoadingSubtitle = 'by Cecilia',
    ShowText = 'Rayfield', -- for mobile users to unhide rayfield, change if you'd like
    Theme = 'Default', -- Check https://docs.sirius.menu/rayfield/configuration/themes

    ToggleUIKeybind = 'K', -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Create a custom folder for your hub/game
        FileName = 'AtlasWare',
    },

    Discord = {
        Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
        Invite = 'discord.gg/evcF8WwA', -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
        RememberJoins = true, -- Set this to false to make them join the discord every time they load it up
    },

    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
        Title = 'Atlas KeySystem',
        Subtitle = 'Put ur Key',
        Note = 'No method of obtaining the key is provided', -- Use this to tell the user how to get a key
        FileName = 'Key', -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
        SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
        GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
        Key = { 'Turyol' }, -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    },
})

local HttpService = game:GetService('HttpService')
local RunService = game:GetService('RunService')
local TeleportService = game:GetService('TeleportService')
local players = game:GetService('Players')
local wrk = game:GetService('Workspace')
local plr = players.LocalPlayer
local hrp = plr.Character:FindFirstChild('HumanoidRootPart')
local humanoid = plr.Character:FindFirstChild('Humanoid')

local function onCharacterAdded(character)
    hrp = character:WaitForChild('HumanoidRootPart')
    humanoid = character:WaitForChild('Humanoid')
end

plr.CharacterAdded:Connect(onCharacterAdded)

if plr.Character then
    onCharacterAdded(plr.Character)
end

local camera = wrk.CurrentCamera
local mouse = plr:GetMouse()

local httprequest = (syn and syn.request)
    or (http and http.request)
    or http_request
    or (fluxus and fluxus.request)
    or request

local hue = 0
local rainbowFov = false
local rainbowSpeed = 0.005

local aimFov = 100
local aimParts = { 'Head' }
local aiming = false
local predictionStrength = 0.065
local smoothing = 0.05

local aimbotEnabled = false
local wallCheck = true
local stickyAimEnabled = false
local teamCheck = false
local healthCheck = false
local minHealth = 0

local antiAim = false

local antiAimAmountX = 0
local antiAimAmountY = -100
local antiAimAmountZ = 0

local antiAimMethod = 'Reset Velo'

local randomVeloRange = 100

local spinBot = false
local spinBotSpeed = 20

local circleColor = Color3.fromRGB(255, 0, 0)
local targetedCircleColor = Color3.fromRGB(0, 255, 0)

local aimViewerEnabled = false
local ignoreSelf = true

local Aimbot = Window:CreateTab('Aimbot')
local AntiAim = Window:CreateTab('Anti-Aim')
local Misc = Window:CreateTab('Misc')

local fovCircle = Drawing.new('Circle')
fovCircle.Thickness = 2
fovCircle.Radius = aimFov
fovCircle.Filled = false
fovCircle.Color = circleColor
fovCircle.Visible = false

local currentTarget = nil

local function checkTeam(player)
    if teamCheck and player.Team == plr.Team then
        return true
    end
    return false
end

local function checkWall(targetCharacter)
    local targetHead = targetCharacter:FindFirstChild('Head')
    if not targetHead then
        return true
    end

    local origin = camera.CFrame.Position
    local direction = (targetHead.Position - origin).unit
        * (targetHead.Position - origin).magnitude
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances =
        { plr.Character, targetCharacter }
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local raycastResult = wrk:Raycast(origin, direction, raycastParams)
    return raycastResult and raycastResult.Instance ~= nil
end

local function getClosestPart(character)
    local closestPart = nil
    local shortestCursorDistance = aimFov
    local cameraPos = camera.CFrame.Position

    for _, partName in ipairs(aimParts) do
        local part = character:FindFirstChild(partName)
        if part then
            local partPos = camera:WorldToViewportPoint(part.Position)
            local screenPos = Vector2.new(partPos.X, partPos.Y)
            local cursorDistance = (screenPos - Vector2.new(mouse.X, mouse.Y)).Magnitude

            if cursorDistance < shortestCursorDistance and partPos.Z > 0 then
                shortestCursorDistance = cursorDistance
                closestPart = part
            end
        end
    end

    return closestPart
end

local function getTarget()
    local nearestPlayer = nil
    local closestPart = nil
    local shortestCursorDistance = aimFov

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= plr and player.Character and not checkTeam(player) then
            if
                player.Character.Humanoid.Health >= minHealth
                or not healthCheck
            then
                local targetPart = getClosestPart(player.Character)
                if targetPart then
                    local screenPos =
                        camera:WorldToViewportPoint(targetPart.Position)
                    local cursorDistance = (Vector2.new(
                        screenPos.X,
                        screenPos.Y
                    ) - Vector2.new(mouse.X, mouse.Y)).Magnitude

                    if cursorDistance < shortestCursorDistance then
                        if not wallCheck or not checkWall(player.Character) then
                            shortestCursorDistance = cursorDistance
                            nearestPlayer = player
                            closestPart = targetPart
                        end
                    end
                end
            end
        end
    end

    return nearestPlayer, closestPart
end

local function predict(player, part)
    if player and part then
        local velocity = player.Character.HumanoidRootPart.Velocity
        local predictedPosition = part.Position
            + (velocity * predictionStrength)
        return predictedPosition
    end
    return nil
end

local function smooth(from, to)
    return from:Lerp(to, smoothing)
end

local function aimAt(player, part)
    local predictedPosition = predict(player, part)
    if predictedPosition then
        if player.Character.Humanoid.Health >= minHealth or not healthCheck then
            local targetCFrame =
                CFrame.new(camera.CFrame.Position, predictedPosition)
            camera.CFrame = smooth(camera.CFrame, targetCFrame)
        end
    end
end

RunService.RenderStepped:Connect(function()
    if aimbotEnabled then
        local offset = 50
        fovCircle.Position = Vector2.new(mouse.X, mouse.Y + offset)

        if rainbowFov then
            hue = hue + rainbowSpeed
            if hue > 1 then
                hue = 0
            end
            fovCircle.Color = Color3.fromHSV(hue, 1, 1)
        else
            if aiming and currentTarget then
                fovCircle.Color = targetedCircleColor
            else
                fovCircle.Color = circleColor
            end
        end

        if aiming then
            if stickyAimEnabled and currentTarget then
                local headPos = camera:WorldToViewportPoint(
                    currentTarget.Character.Head.Position
                )
                local screenPos = Vector2.new(headPos.X, headPos.Y)
                local cursorDistance = (screenPos - Vector2.new(
                    mouse.X,
                    mouse.Y
                )).Magnitude

                if
                    cursorDistance > aimFov
                    or (wallCheck and checkWall(currentTarget.Character))
                    or checkTeam(currentTarget)
                then
                    currentTarget = nil
                end
            end

            if not stickyAimEnabled or not currentTarget then
                local target, targetPart = getTarget()
                currentTarget = target
                currentTargetPart = targetPart
            end

            if currentTarget and currentTargetPart then
                aimAt(currentTarget, currentTargetPart)
            end
        else
            currentTarget = nil
        end
    end
end)

RunService.Heartbeat:Connect(function()
    if antiAim then
        if antiAimMethod == 'Reset Velo' then
            local vel = hrp.Velocity
            hrp.Velocity =
                Vector3.new(antiAimAmountX, antiAimAmountY, antiAimAmountZ)
            RunService.RenderStepped:Wait()
            hrp.Velocity = vel
        elseif antiAimMethod == 'Reset Pos [BROKEN]' then
            local pos = hrp.CFrame
            hrp.Velocity =
                Vector3.new(antiAimAmountX, antiAimAmountY, antiAimAmountZ)
            RunService.RenderStepped:Wait()
            hrp.CFrame = pos
        elseif antiAimMethod == 'Random Velo' then
            local vel = hrp.Velocity
            local a = math.random(-randomVeloRange, randomVeloRange)
            local s = math.random(-randomVeloRange, randomVeloRange)
            local d = math.random(-randomVeloRange, randomVeloRange)
            hrp.Velocity = Vector3.new(a, s, d)
            RunService.RenderStepped:Wait()
            hrp.Velocity = vel
        end
    end
end)

mouse.Button2Down:Connect(function()
    if aimbotEnabled then
        aiming = true
    end
end)

mouse.Button2Up:Connect(function()
    if aimbotEnabled then
        aiming = false
    end
end)

local aimbot = Aimbot:CreateToggle({
    Name = 'Aimbot',
    CurrentValue = false,
    Flag = 'Aimbot',
    Callback = function(Value)
        aimbotEnabled = Value
        fovCircle.Visible = Value
    end,
})

local aimpart = Aimbot:CreateDropdown({
    Name = 'Aim Part',
    Options = {
        'Head',
        'HumanoidRootPart',
        'Left Arm',
        'Right Arm',
        'Torso',
        'Left Leg',
        'Right Leg',
    },
    CurrentOption = { 'Head' },
    MultipleOptions = true,
    Flag = 'AimPart',
    Callback = function(Options)
        aimParts = Options
    end,
})

local smoothingslider = Aimbot:CreateSlider({
    Name = 'Smoothing',
    Range = { 0, 100 },
    Increment = 1,
    CurrentValue = 5,
    Flag = 'Smoothing',
    Callback = function(Value)
        smoothing = 1 - (Value / 100)
    end,
})

local predictionstrength = Aimbot:CreateSlider({
    Name = 'Prediction Strength',
    Range = { 0, 0.2 },
    Increment = 0.001,
    CurrentValue = 0.065,
    Flag = 'PredictionStrength',
    Callback = function(Value)
        predictionStrength = Value
    end,
})

local fovvisibility = Aimbot:CreateToggle({
    Name = 'Fov Visibility',
    CurrentValue = true,
    Flag = 'FovVisibility',
    Callback = function(Value)
        fovCircle.Visible = Value
    end,
})

local aimbotfov = Aimbot:CreateSlider({
    Name = 'Aimbot Fov',
    Range = { 0, 1000 },
    Increment = 1,
    CurrentValue = 100,
    Flag = 'AimbotFov',
    Callback = function(Value)
        aimFov = Value
        fovCircle.Radius = aimFov
    end,
})

local wallcheck = Aimbot:CreateToggle({
    Name = 'Wall Check',
    CurrentValue = true,
    Flag = 'WallCheck',
    Callback = function(Value)
        wallCheck = Value
    end,
})

local stickyaim = Aimbot:CreateToggle({
    Name = 'Sticky Aim',
    CurrentValue = false,
    Flag = 'StickyAim',
    Callback = function(Value)
        stickyAimEnabled = Value
    end,
})

local teamchecktoggle = Aimbot:CreateToggle({
    Name = 'Team Check',
    CurrentValue = false,
    Flag = 'TeamCheck',
    Callback = function(Value)
        teamCheck = Value
    end,
})

local healthchecktoggle = Aimbot:CreateToggle({
    Name = 'Health Check',
    CurrentValue = false,
    Flag = 'HealthCheck',
    Callback = function(Value)
        healthCheck = Value
    end,
})

local minhealth = Aimbot:CreateSlider({
    Name = 'Min Health',
    Range = { 0, 100 },
    Increment = 1,
    CurrentValue = 0,
    Flag = 'MinHealth',
    Callback = function(Value)
        minHealth = Value
    end,
})

local circlecolor = Aimbot:CreateColorPicker({
    Name = 'Fov Color',
    Color = circleColor,
    Callback = function(Color)
        circleColor = Color
        fovCircle.Color = Color
    end,
})

local targetedcirclecolor = Aimbot:CreateColorPicker({
    Name = 'Targeted Fov Color',
    Color = targetedCircleColor,
    Callback = function(Color)
        targetedCircleColor = Color
    end,
})

local circlerainbow = Aimbot:CreateToggle({
    Name = 'Rainbow Fov',
    CurrentValue = false,
    Flag = 'RainbowFov',
    Callback = function(Value)
        rainbowFov = Value
    end,
})

local antiaimtoggle = AntiAim:CreateToggle({
    Name = 'Anti-Aim',
    CurrentValue = false,
    Flag = 'AntiAim',
    Callback = function(Value)
        antiAim = Value
        if Value then
            Rayfield:Notify({
                Title = 'Anti-Aim',
                Content = 'Enabled!',
                Duration = 1,
                Image = 4483362458,
            })
        else
            Rayfield:Notify({
                Title = 'Anti-Aim',
                Content = 'Disabled!',
                Duration = 1,
                Image = 4483362458,
            })
        end
    end,
})

local antiaimmethod = AntiAim:CreateDropdown({
    Name = 'Anti-Aim Method',
    Options = { 'Reset Velo', 'Random Velo', 'Reset Pos [BROKEN]' },
    CurrentOption = 'Reset Velo',
    Flag = 'AntiAimMethod',
    Callback = function(Option)
        antiAimMethod = type(Option) == 'table' and Option[1] or Option
        if antiAimMethod == 'Reset Velo' then
            Rayfield:Notify({
                Title = 'Reset Velocity',
                Content = 'Nobody will see it, but exploiters will aim in the wrong place.',
                Duration = 5,
                Image = 4483362458,
            })
        elseif antiAimMethod == 'Reset Pos [BROKEN]' then
            Rayfield:Notify({
                Title = 'Reset Pos [BROKEN]',
                Content = 'This is a bit buggy right now, so idk if it works that well',
                Duration = 5,
                Image = 4483362458,
            })
        elseif antiAimMethod == 'Random Velo' then
            Rayfield:Notify({
                Title = 'Random Velocity',
                Content = "Depending on ping some peoplev will see u 'teleporting' around but you are actually in the same spot the entire time.",
                Duration = 5,
                Image = 4483362458,
            })
        end
    end,
})

local antiaimamountx = AntiAim:CreateSlider({
    Name = 'Anti-Aim Amount X',
    Range = { -1000, 1000 },
    Increment = 10,
    CurrentValue = 0,
    Flag = 'AntiAimAmountX',
    Callback = function(Value)
        antiAimAmountX = Value
    end,
})

local antiaimamounty = AntiAim:CreateSlider({
    Name = 'Anti-Aim Amount Y',
    Range = { -1000, 1000 },
    Increment = 10,
    CurrentValue = -100,
    Flag = 'AntiAimAmountY',
    Callback = function(Value)
        antiAimAmountY = Value
    end,
})

local antiaimamountz = AntiAim:CreateSlider({
    Name = 'Anti-Aim Amount Z',
    Range = { -1000, 1000 },
    Increment = 10,
    CurrentValue = 0,
    Flag = 'AntiAimAmountZ',
    Callback = function(Value)
        antiAimAmountZ = Value
    end,
})

local randomvelorange = AntiAim:CreateSlider({
    Name = 'Random Velo Range',
    Range = { 0, 1000 },
    Increment = 10,
    CurrentValue = 100,
    Flag = 'RandomVeloRange',
    Callback = function(Value)
        randomVeloRange = Value
    end,
})

-- [< Misc >]

local spinbottoggle = Misc:CreateToggle({
    Name = 'Spin-Bot',
    CurrentValue = false,
    Flag = 'SpinBot',
    Callback = function(Value)
        spinBot = Value
        if Value then
            for i, v in pairs(hrp:GetChildren()) do
                if v.Name == 'Spinning' then
                    v:Destroy()
                end
            end
            plr.Character.Humanoid.AutoRotate = false
            local Spin = Instance.new('BodyAngularVelocity')
            Spin.Name = 'Spinning'
            Spin.Parent = hrp
            Spin.MaxTorque = Vector3.new(0, math.huge, 0)
            Spin.AngularVelocity = Vector3.new(0, spinBotSpeed, 0)
            Rayfield:Notify({
                Title = 'Spin Bot',
                Content = 'Enabled!',
                Duration = 1,
                Image = 4483362458,
            })
        else
            for i, v in pairs(hrp:GetChildren()) do
                if v.Name == 'Spinning' then
                    v:Destroy()
                end
            end
            plr.Character.Humanoid.AutoRotate = true
            Rayfield:Notify({
                Title = 'Spin Bot',
                Content = 'Disabled!',
                Duration = 1,
                Image = 4483362458,
            })
        end
    end,
})

local spinbotspeed = Misc:CreateSlider({
    Name = 'Spin-Bot Speed',
    Range = { 0, 1000 },
    Increment = 1,
    CurrentValue = 20,
    Flag = 'SpinBotSpeed',
    Callback = function(Value)
        spinBotSpeed = Value
        if spinBot then
            for i, v in pairs(hrp:GetChildren()) do
                if v.Name == 'Spinning' then
                    v:Destroy()
                end
            end
            local Spin = Instance.new('BodyAngularVelocity')
            Spin.Name = 'Spinning'
            Spin.Parent = hrp
            Spin.MaxTorque = Vector3.new(0, math.huge, 0)
            Spin.AngularVelocity = Vector3.new(0, Value, 0)
        end
    end,
})

local ServerHop = Misc:CreateButton({
    Name = 'Server Hop',
    Callback = function()
        if httprequest then
            local servers = {}
            local req = httprequest({
                Url = string.format(
                    'https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true',
                    game.PlaceId
                ),
            })
            local body = HttpService:JSONDecode(req.Body)

            if body and body.data then
                for i, v in next, body.data do
                    if
                        type(v) == 'table'
                        and tonumber(v.playing)
                        and tonumber(v.maxPlayers)
                        and v.playing < v.maxPlayers
                        and v.id ~= game.JobId
                    then
                        table.insert(servers, 1, v.id)
                    end
                end
            end

            if #servers > 0 then
                TeleportService:TeleportToPlaceInstance(
                    game.PlaceId,
                    servers[math.random(1, #servers)],
                    plr
                )
            else
                Rayfield:Notify({
                    Title = 'Server Hop',
                    Content = "Couldn't find a valid server!!!",
                    Duration = 1,
                    Image = 4483362458,
                })
            end
        else
            Rayfield:Notify({
                Title = 'Server Hop',
                Content = 'Your executor is ass!',
                Duration = 1,
                Image = 4483362458,
            })
        end
    end,
})

local Tab = Window:CreateTab('Car Modifier')

-- Services
local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local UserInputService = game:GetService('UserInputService')
local LocalPlayer = Players.LocalPlayer

-- Variables
local flightEnabled = false
local flightSpeed = 1
local velocityEnabled = true
local velocityMult = 0.025
local velocityKey = Enum.KeyCode.W
local brakeKey = Enum.KeyCode.S
local stopKey = Enum.KeyCode.P
local defaultCharacterParent

-- Functions
local function GetVehicleFromDescendant(Descendant)
    return Descendant:FindFirstAncestor(LocalPlayer.Name .. "'s Car")
        or (Descendant:FindFirstAncestor('Body') and Descendant:FindFirstAncestor(
            'Body'
        ).Parent)
        or (Descendant:FindFirstAncestor('Misc') and Descendant:FindFirstAncestor(
            'Misc'
        ).Parent)
        or Descendant:FindFirstAncestorWhichIsA('Model')
end

local function TeleportVehicle(CoordinateFrame)
    local Vehicle = GetVehicleFromDescendant(
        LocalPlayer.Character:FindFirstChildWhichIsA('Humanoid').SeatPart
    )
    if Vehicle then
        pcall(function()
            if Vehicle.PrimaryPart then
                Vehicle:SetPrimaryPartCFrame(CoordinateFrame)
            else
                Vehicle:MoveTo(CoordinateFrame.Position)
            end
        end)
    end
end

-- Rayfield UI Components
Tab:CreateToggle({
    Name = 'Flight',
    CurrentValue = false,
    Callback = function(value)
        flightEnabled = value
    end,
})

Tab:CreateSlider({
    Name = 'Flight Speed',
    Range = { 0.1, 10 },
    Increment = 0.1,
    CurrentValue = 1,
    Suffix = 'Speed',
    Callback = function(value)
        flightSpeed = value
    end,
})

Tab:CreateToggle({
    Name = 'Velocity Control',
    CurrentValue = true,
    Callback = function(value)
        velocityEnabled = value
    end,
})

Tab:CreateSlider({
    Name = 'Velocity Multiplier',
    Range = { 0.001, 0.1 },
    Increment = 0.001,
    CurrentValue = 0.025,
    Suffix = 'x',
    Callback = function(value)
        velocityMult = value
    end,
})

-- Keybinds (hata Ã¶nlemli)
Tab:CreateKeybind({
    Name = 'Velocity Key',
    CurrentKeybind = 'W',
    Mode = 'Hold',
    Callback = function(key)
        local success, enumKey = pcall(function()
            return Enum.KeyCode[key]
        end)
        if success and enumKey then
            velocityKey = enumKey
        end
    end,
})

Tab:CreateKeybind({
    Name = 'Brake Key',
    CurrentKeybind = 'S',
    Mode = 'Hold',
    Callback = function(key)
        local success, enumKey = pcall(function()
            return Enum.KeyCode[key]
        end)
        if success and enumKey then
            brakeKey = enumKey
        end
    end,
})

Tab:CreateKeybind({
    Name = 'Stop Vehicle Key',
    CurrentKeybind = 'P',
    Mode = 'Press',
    Callback = function(key)
        local success, enumKey = pcall(function()
            return Enum.KeyCode[key]
        end)
        if success and enumKey then
            stopKey = enumKey
        end
    end,
})

-- Flight & Velocity Loop
RunService.Stepped:Connect(function()
    local Character = LocalPlayer.Character
    if Character and typeof(Character) == 'Instance' then
        local Humanoid = Character:FindFirstChildWhichIsA('Humanoid')
        if Humanoid then
            local SeatPart = Humanoid.SeatPart
            if SeatPart and SeatPart:IsA('VehicleSeat') then
                local Vehicle = GetVehicleFromDescendant(SeatPart)
                if Vehicle and Vehicle:IsA('Model') then
                    Character.Parent = Vehicle
                    if flightEnabled then
                        if not Vehicle.PrimaryPart then
                            Vehicle.PrimaryPart = SeatPart
                        end
                        local camLook =
                            workspace.CurrentCamera.CFrame.LookVector
                        local moveVector = Vector3.new(
                            (
                                UserInputService:IsKeyDown(Enum.KeyCode.D)
                                    and flightSpeed
                                or (UserInputService:IsKeyDown(Enum.KeyCode.A) and -flightSpeed)
                                or 0
                            ),
                            (
                                UserInputService:IsKeyDown(Enum.KeyCode.E)
                                    and flightSpeed / 2
                                or (UserInputService:IsKeyDown(Enum.KeyCode.Q) and -flightSpeed / 2)
                                or 0
                            ),
                            (
                                UserInputService:IsKeyDown(Enum.KeyCode.S)
                                    and flightSpeed
                                or (UserInputService:IsKeyDown(Enum.KeyCode.W) and -flightSpeed)
                                or 0
                            )
                        )
                        Vehicle:SetPrimaryPartCFrame(
                            CFrame.new(
                                Vehicle.PrimaryPart.Position,
                                Vehicle.PrimaryPart.Position + camLook
                            )
                                * CFrame.new(moveVector)
                        )
                        SeatPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                        SeatPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                    else
                        Character.Parent = defaultCharacterParent
                            or Character.Parent
                        defaultCharacterParent = Character.Parent
                    end
                end
            end
        end
    end
end)

-- Key Input Handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed or not velocityEnabled then
        return
    end

    local Character = LocalPlayer.Character
    if not Character then
        return
    end
    local Humanoid = Character:FindFirstChildWhichIsA('Humanoid')
    if not Humanoid then
        return
    end
    local SeatPart = Humanoid.SeatPart
    if not SeatPart or not SeatPart:IsA('VehicleSeat') then
        return
    end

    if input.KeyCode == velocityKey then
        while UserInputService:IsKeyDown(velocityKey) and velocityEnabled do
            task.wait()
            SeatPart.AssemblyLinearVelocity *= Vector3.new(
                1 + velocityMult,
                1,
                1 + velocityMult
            )
        end
    elseif input.KeyCode == brakeKey then
        while UserInputService:IsKeyDown(brakeKey) and velocityEnabled do
            task.wait()
            SeatPart.AssemblyLinearVelocity *= Vector3.new(
                1 - velocityMult,
                1,
                1 - velocityMult
            )
        end
    elseif input.KeyCode == stopKey then
        SeatPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        SeatPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    end
end)
